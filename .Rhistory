}
plot_seasonality_shift <- function(lag_data) {
ggplot(lag_data, aes(x = year, y = shift, color = country, group = country)) +
geom_line(size = 1, na.rm = TRUE) +
geom_point(size = 3, na.rm = TRUE) +
labs(title = "Estimated Seasonality Shift in Weeks (Compared to 2019)",
x = "Year",
y = "Shift in Weeks") +
theme_fivethirtyeight() +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",
axis.ticks.y = element_line(),
axis.line.y.left = element_line(),
legend.title = element_blank(),
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
axis.text.y = element_text()
) +
scale_x_continuous(breaks = unique(lag_data$year)) +
ylim(-20, 20)
}
# alternative method
ccf_shift_data1 <- function(data, countries, hemisphere) {
# Initialize list to store results
lag_results <- list()
for (country in countries) {
country_hemisphere <- hemisphere[[country]]
# Retrieve country data and adjust weeks based on hemisphere
country_data <- data %>%
filter(country == !!country) %>%
mutate(epi_week = case_when(
hemisphere[country] == "N" ~ (week + 26) %% 52,
TRUE ~ week
)) %>%
arrange(year, epi_week)
# Ensure 'cases' column is numeric and remove NA values
country_data <- country_data %>%
mutate(cases = as.numeric(cases)) %>%
drop_na(cases)
# Check if 2019 exists in data
if (!2019 %in% country_data$year) next
# Convert into wide format for correlation analysis
country_data_wide <- country_data %>%
tidyr::pivot_wider(names_from = year, values_from = cases)
# Ensure 2019 column exists
if (!"2019" %in% colnames(country_data_wide)) next
# Get valid years for analysis
valid_years <- unique(country_data$year)
# Perform time lag correlation for each post-2021 year
for (comp_year in valid_years[valid_years > 2021]) {
ref_2019 <- as.numeric(country_data_wide$`2019`)
comp_year_data <- as.numeric(country_data_wide[[as.character(comp_year)]])
# Skip if data is missing
if (length(ref_2019) == 0 | length(comp_year_data) == 0) next
# Compute cross-correlation function (ccf), handling errors
ccf_result <- tryCatch({
ccf(ref_2019, comp_year_data, lag.max = 20, plot = FALSE)
}, error = function(e) return(NULL))
# Skip if ccf failed
if (is.null(ccf_result)) next
# Find best lag (highest correlation)
best_lag <- ccf_result$lag[which.max(ccf_result$acf)]
# Store results
lag_results[[paste(country, comp_year, sep = "_")]] <- data.frame(
country = country,
year = as.numeric(comp_year),
shift = best_lag
)
}
}
# Combine all results into a dataframe
lag_data <- do.call(rbind, lag_results)
return(lag_data)
}
plot_seasonality_shift1 <- function(lag_data) {
ggplot(lag_data, aes(x = year, y = shift, color = country, group = country)) +
geom_line(size = 1, na.rm = TRUE) +
geom_point(size = 3, na.rm = TRUE) +
labs(title = "Estimated Seasonality Shift in Weeks (Compared to 2019)",
x = "Year",
y = "Shift in Weeks") +
theme_fivethirtyeight() +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",
axis.ticks.y = element_line(),
axis.line.y.left = element_line(),
legend.title = element_blank(),
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
axis.text.y = element_text()
) +
scale_x_continuous(breaks = unique(lag_data$year)) +
ylim(-20, 20)
}
# more systematic approach
chosen_countries <- unique(flu_dataset$country)
southern_hemisphere <- c(
"Argentina", "Australia", "Bolivia", "Botswana", "Brazil", "Chile", "Colombia",
"Ecuador", "Eswatini", "Fiji", "Lesotho", "Madagascar", "Malawi", "Mauritius",
"Mozambique", "Namibia", "New Zealand", "Paraguay", "Peru", "Papua New Guinea",
"Rwanda", "Samoa", "Solomon Islands", "South Africa", "Tanzania", "Timor-Leste",
"Tonga", "Uruguay", "Vanuatu", "Zambia", "Zimbabwe"
)
hemisphere_info <- setNames(
ifelse(chosen_countries %in% southern_hemisphere, "S", "N"),
chosen_countries
)
# produce the plot
shift_data <- ccf_shift_data(flu_dataset, chosen_countries, hemisphere_info)
plot_seasonality_shift(shift_data)
# produce the plot using (hopefully) more robust method
shift_data1 <- ccf_shift_data1(flu_dataset, chosen_countries, hemisphere_info)
plot_seasonality_shift1(shift_data1)
# select countries for report
countries_rep <- c("Argentina", "Australia", "Denmark", "France", "Germany", "Hong Kong",
"Ireland", "Japan", "Taiwan", "United Kingdom", "United States of America")
hemisphere_rep <- setNames(
ifelse(countries_rep %in% southern_hemisphere, "S", "N"),
countries_rep
)
shift_data_rep <- ccf_shift_data1(flu_dataset, countries_rep, hemisphere_rep)
plot_seasonality_shift1(shift_data_rep)
flu_dataset %>%
filter(country == "Chile") %>%
ggplot(aes(x = week, y = cases, group = year, color = factor(year))) +
geom_line(size = 1, alpha = 0.7) +
scale_color_viridis_d() +  # Colorblind-friendly palette
scale_x_continuous(breaks = seq(1, 52, by = 4)) +  # Show week numbers at intervals
labs(title = "Flu Cases by Week",
x = "Week",
y = "Cases",
color = "Year") +
theme_minimal() +
theme(legend.position = "bottom")
plot_seasonality_shift_int <- function(lag_data) {
p <- ggplot(lag_data, aes(x = year, y = shift,
color = country, group = country,
text = paste("Country:", country, "<br>Year:", year, "<br>Shift:", shift))) +
geom_line(size = 1, na.rm = TRUE) +
geom_point(size = 3, na.rm = TRUE) +
labs(title = "Estimated Seasonality Shift in Weeks (Compared to 2019)",
x = "Year",
y = "Shift in Weeks") +
theme_fivethirtyeight() +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",
axis.ticks.y = element_line(),
axis.line.y.left = element_line(),
legend.title = element_blank(),
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
axis.text.y = element_text()
) +
scale_x_continuous(breaks = unique(lag_data$year)) +
ylim(-20, 20)
ggplotly(p, tooltip = "text")  # Convert ggplot to interactive plotly plot
}
plot_seasonality_shift_int(shift_data)
# Function to find the peak week for a given year
find_peak_week <- function(data, year) {
peak_week <- data %>%
filter(year == !!year) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(epi_week)
return(peak_week[1])  # Ensure we take the first peak in case of ties
}
# Bootstrap function to estimate shift and confidence interval
bootstrap_shift <- function(data, indices, peak_2019) {
sampled_data <- data[indices, ]  # Bootstrap sample
peak_sample <- find_peak_week(sampled_data, sampled_data$year[1])  # Find peak for sample
shift <- peak_sample - peak_2019  # Calculate shift compared to 2019
return(shift)
}
# calculate peak shifts and perform bootstrap sampling with 90% confidence intervals
plot_shift_bootstrap <- function(data, countries, hemisphere) {
peak_results <- list()
# loop through each country
for (country in countries) {
# check it exists in the dataset
if (!(country %in% unique(data$country))) {
message(paste("Skipping", country, "- not in dataset"))
next
}
# retrieve country data and shift week based on hemisphere
country_data <- data %>%
filter(country == !!country) %>%
mutate(epi_week = case_when(
hemisphere[country] == "N" ~ (week + 26) %% 52,  # Shift by 26 weeks if North
TRUE ~ week  # Keep same if South
)) %>%
arrange(year, epi_week)
# Find peak week for 2019 (the baseline year)
peak_2019 <- find_peak_week(country_data, 2019)
# Skip if peak for 2019 is not found
if (is.na(peak_2019)) {
message(paste("Skipping", country, "- 2019 peak not found"))
next
}
# Filter data for years after 2021
years_to_analyse <- unique(country_data$year[country_data$year > 2021])
# Prepare an empty data frame to store peak shift results
country_peak_shifts <- data.frame(country = character(), year = integer(), shift = numeric(),
lower_ci = numeric(), upper_ci = numeric())
# Perform bootstrap for each year after 2021
for (year in years_to_analyse) {
# Filter data for the specific year
year_data <- country_data %>%
filter(year == !!year)
# Check if there's enough data to perform bootstrapping (at least 30 data points)
if (nrow(year_data) < 30) {
message(paste("Skipping", country, year, "- not enough data for bootstrapping"))
next
}
# Bootstrap sampling
set.seed(123)  # For reproducibility
bootstrap_results <- boot(data = year_data, statistic = bootstrap_shift, R = 100,
peak_2019 = peak_2019)
# Calculate 90% confidence interval for the shift
ci <- boot.ci(bootstrap_results, type = "perc", conf = 0.90)$percent[4:5]
# Store the results for the country and year
country_peak_shifts <- rbind(country_peak_shifts,
data.frame(country = country, year = year,
shift = mean(bootstrap_results$t),
lower_ci = ci[1], upper_ci = ci[2]))
}
# Append country results to the list
peak_results[[country]] <- country_peak_shifts
}
# Combine all results into a single dataframe
peak_results_df <- do.call(rbind, peak_results)
# Plot the results with confidence intervals
ggplot(peak_results_df, aes(x = year, y = shift, color = country, group = country)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2) +
labs(title = "Peak Week Shift with 90% Confidence Intervals",
x = "Year", y = "Peak Week Shift (Compared to 2019)") +
theme_fivethirtyeight() +  # Apply theme
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",   # Positioning of the legend
legend.direction = "vertical",
axis.ticks.y = element_line(),
axis.line.y.left = element_line(),
legend.title = element_blank(),
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
axis.text.y = element_text()
) +
scale_x_continuous(breaks = unique(peak_results_df$year)) +  # integer years on x-axis
ylim(-15, 15)  # set y-axis limit
}
# select countries for bootstrap
countries_boot <- c("Australia",
"Japan", "South Africa",
"United Kingdom", "United States of America") # omitted South America
hemisphere_boot <- setNames(
ifelse(countries_boot %in% southern_hemisphere, "S", "N"),
countries_boot
)
plot_shift_bootstrap(flu_dataset, countries_boot, hemisphere_boot)
# Function to calculate peak shifts and bootstrap results
bootstrap_data <- function(data, countries, hemisphere) {
peak_results <- list()
# Loop through each country
for (country in countries) {
# Check if the country exists in the dataset
if (!(country %in% unique(data$country))) {
message(paste("Skipping", country, "- not in dataset"))
next
}
# Retrieve country data and shift week based on hemisphere
country_data <- data %>%
filter(country == !!country) %>%
mutate(epi_week = case_when(
hemisphere[country] == "N" ~ (week + 26) %% 52,  # Shift by 26 weeks if North
TRUE ~ week  # Keep the same if South
)) %>%
arrange(year, epi_week)
# Find peak week for 2019 (the baseline year)
peak_2019 <- find_peak_week(country_data, 2019)
# Skip if peak for 2019 is not found
if (is.na(peak_2019)) {
message(paste("Skipping", country, "- 2019 peak not found"))
next
}
# Filter data for years after 2021
years_to_analyse <- unique(country_data$year[country_data$year > 2021])
# Prepare an empty data frame to store peak shift results
country_peak_shifts <- data.frame(country = character(), year = integer(), shift = numeric(),
lower_ci = numeric(), upper_ci = numeric())
# Perform bootstrap for each year after 2021
for (year in years_to_analyse) {
# Filter data for the specific year
year_data <- country_data %>%
filter(year == !!year)
# Check if there's enough data to perform bootstrapping (at least 30 data points)
if (nrow(year_data) < 30) {
message(paste("Skipping", country, year, "- not enough data for bootstrapping"))
next
}
# Bootstrap sampling
set.seed(123)  # For reproducibility
bootstrap_results <- boot(data = year_data, statistic = bootstrap_shift, R = 100,
peak_2019 = peak_2019)
# Calculate 90% confidence interval for the shift
ci <- boot.ci(bootstrap_results, type = "perc", conf = 0.90)$percent[4:5]
# Store the results for the country and year
country_peak_shifts <- rbind(country_peak_shifts,
data.frame(country = country, year = year,
shift = mean(bootstrap_results$t),
lower_ci = ci[1], upper_ci = ci[2]))
}
# Append country results to the list
peak_results[[country]] <- country_peak_shifts
}
# Combine all results into a single data frame
peak_results_df <- do.call(rbind, peak_results)
return(peak_results_df)
}
# Function to plot peak shift results
plot_shift_bootstrap <- function(peak_results_df) {
ggplot(peak_results_df, aes(x = year, y = shift, color = country, group = country)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2) +
labs(title = "Peak Week Shift with 90% Confidence Intervals",
x = "Year", y = "Peak Week Shift (Compared to 2019)") +
theme_fivethirtyeight() +  # Apply theme
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",   # Positioning of the legend
legend.direction = "vertical",
axis.ticks.y = element_line(),
axis.line.y.left = element_line(),
legend.title = element_blank(),
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
axis.text.y = element_text()
) +
scale_x_continuous(breaks = unique(peak_results_df$year)) +  # Integer years on x-axis
ylim(-15, 15)  # Set y-axis limit
}
# select countries for bootstrap
countries_boot <- c("Australia",
"Japan", "South Africa",
"United Kingdom", "United States of America") # omitted South America (Chile)
hemisphere_boot <- setNames(
ifelse(countries_boot %in% southern_hemisphere, "S", "N"),
countries_boot
)
shift_data_boot <- bootstrap_data(flu_dataset, countries_boot, hemisphere_boot)
plot_shift_bootstrap(flu_dataset, countries_boot, hemisphere_boot)
plot_shift_bootstrap(shift_data_boot)
# select countries for bootstrap
countries_boot <- c("Australia", "Chile",
"Japan", "South Africa",
"United Kingdom", "United States of America") # omitted South America (Chile)
hemisphere_boot <- setNames(
ifelse(countries_boot %in% southern_hemisphere, "S", "N"),
countries_boot
)
shift_data_boot <- bootstrap_data(flu_dataset, countries_boot, hemisphere_boot)
plot_shift_bootstrap(shift_data_boot)
shift_data_boot
# Function to plot peak shift results
plot_shift_bootstrap <- function(peak_results_df) {
ggplot(peak_results_df, aes(x = year, y = shift, color = country, group = country)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.1) +
labs(title = "Peak Week Shift with 90% Confidence Intervals",
x = "Year", y = "Peak Week Shift (Compared to 2019)") +
theme_fivethirtyeight() +  # Apply theme
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",   # Positioning of the legend
legend.direction = "vertical",
axis.ticks.y = element_line(),
axis.line.y.left = element_line(),
legend.title = element_blank(),
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
axis.text.y = element_text()
) +
scale_x_continuous(breaks = unique(peak_results_df$year)) +  # Integer years on x-axis
ylim(-15, 15)  # Set y-axis limit
}
plot_shift_bootstrap(shift_data_boot)
# Function to plot peak shift results
plot_shift_bootstrap <- function(peak_results_df) {
ggplot(peak_results_df, aes(x = year, y = shift, color = country, group = country)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2) +
labs(title = "Peak Week Shift with 90% Confidence Intervals",
x = "Year", y = "Peak Week Shift (Compared to 2019)") +
theme_fivethirtyeight() +  # Apply theme
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",   # Positioning of the legend
legend.direction = "vertical",
axis.ticks.y = element_line(),
axis.line.y.left = element_line(),
legend.title = element_blank(),
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8),
axis.text.y = element_text()
) +
scale_x_continuous(breaks = unique(peak_results_df$year)) +  # Integer years on x-axis
ylim(-15, 15)  # Set y-axis limit
}
plot_shift_bootstrap(shift_data_boot)
ggplot(shift_data_boot, aes(x = year, y = shift, group = country)) +
geom_line(size = 1, color = "steelblue") +
geom_point(size = 3, color = "steelblue") +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "lightblue") +
labs(title = "Peak Week Shift by Country",
x = "Year", y = "Peak Week Shift (Compared to 2019)") +
facet_wrap(~ country, scales = "free_y", ncol = 3) +  # One plot per country
theme_minimal() +
theme(
strip.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
scale_x_continuous(breaks = c(2022, 2023, 2024))
# dumbbell plot
ggplot(peak_results_df, aes(x = year, y = shift, group = country, color = country)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
geom_line(size = 0.8, linetype = "dashed") +
labs(title = "Peak Week Shift by Country",
x = "Year", y = "Peak Week Shift (Compared to 2019)") +
theme_minimal() +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.title = element_blank()
) +
scale_x_continuous(breaks = c(2022, 2023, 2024)) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
# dumbbell plot
ggplot(shift_data_boot, aes(x = year, y = shift, group = country, color = country)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
geom_line(size = 0.8, linetype = "dashed") +
labs(title = "Peak Week Shift by Country",
x = "Year", y = "Peak Week Shift (Compared to 2019)") +
theme_minimal() +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.title = element_blank()
) +
scale_x_continuous(breaks = c(2022, 2023, 2024)) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
# heatmap
ggplot(shift_data_boot, aes(x = year, y = country, fill = shift)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "A", name = "Shift") +
labs(title = "Heatmap of Peak Week Shifts by Country and Year",
x = "Year", y = "Country") +
theme_minimal() +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.y = element_text(size = 8),
legend.position = "right"
) +
scale_x_continuous(breaks = c(2022, 2023, 2024))
# lollipop
ggplot(shift_data_boot, aes(x = year, y = shift, color = country)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
facet_wrap(~ country, ncol = 1, scales = "free_y") +
labs(title = "Peak Week Shift by Country (with Confidence Intervals)",
x = "Year", y = "Shift") +
theme_minimal() +
theme(
strip.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "none"
) +
scale_x_continuous(breaks = c(2022, 2023, 2024))
# bar plot with error bars
ggplot(shift_data_boot, aes(x = factor(year), y = shift, fill = country)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), position = position_dodge(0.9), width = 0.25) +
labs(title = "Peak Week Shift with Confidence Intervals by Country",
x = "Year", y = "Shift") +
theme_minimal() +
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.title = element_blank()
) +
scale_fill_brewer(palette = "Set3")
